// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

var component = ReasonReact.statelessComponent("Users");

function str(prim) {
  return prim;
}

var ppx_printed_query = "query viewUsers($appId: String!)  {\nusers  {\nid  \nname  \ncreatedAt  \npermissions  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "users");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var field_id;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    field_id = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    field_id = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "name");
                  var field_name;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    field_name = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    field_name = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "createdAt");
                  var field_createdAt;
                  if (match$5 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeNull(value$4);
                    if (match$6 !== undefined) {
                      field_createdAt = undefined;
                    } else {
                      var match$7 = Js_json.decodeString(value$4);
                      field_createdAt = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                    }
                  } else {
                    field_createdAt = undefined;
                  }
                  var match$8 = Js_dict.get(value$1, "permissions");
                  var field_permissions;
                  if (match$8 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$8);
                    var match$9 = Js_json.decodeNull(value$5);
                    if (match$9 !== undefined) {
                      field_permissions = undefined;
                    } else {
                      var match$10 = Js_json.decodeArray(value$5);
                      field_permissions = match$10 !== undefined ? match$10.map((function (value) {
                                var match = Js_json.decodeString(value);
                                if (match !== undefined) {
                                  return match;
                                } else {
                                  return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                }
                              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$5));
                    }
                  } else {
                    field_permissions = undefined;
                  }
                  return /* record */[
                          /* id */field_id,
                          /* name */field_name,
                          /* createdAt */field_createdAt,
                          /* permissions */field_permissions
                        ];
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected object of type User, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field users on type Query is missing");
    }
    return {
            users: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(appId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "appId",
                  appId
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var appId = variables.appId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "appId",
                  appId
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ViewAll = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ppx_printed_query$1 = "mutation createUser($appId: String!, $name: String!, $email: String!)  {\ncreateUser(data: {appId: $appId, name: $name, email: $email})  {\nid  \nname  \nemail  \n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createUser");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$3);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
          }
          var match$6 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$6 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeString(value$4);
            tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
          }
          var match$8 = Js_dict.get(value$2, "email");
          var tmp$4;
          if (match$8 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$8);
            var match$9 = Js_json.decodeString(value$5);
            tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field email on type User is missing");
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            email: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            createUser: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(appId, name, email, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "appId",
                  appId
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "email",
                  email
                ]
              ]),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var appId = variables.appId;
  var name = variables.name;
  var email = variables.email;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "appId",
                  appId
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "email",
                  email
                ]
              ]),
          parse: parse$1
        };
}

function ret_type$1(f) {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var CreateNew = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var ViewQueryComponent = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var CreateNewMutationComponent = ReasonApollo.CreateMutation([
      ppx_printed_query$1,
      parse$1
    ]);

function displayDetails(entity) {
  return React.createElement("li", undefined, entity[/* name */1]);
}

function make$2($staropt$star, _children) {
  var cls = $staropt$star !== undefined ? $staropt$star : "";
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var viewQuery = make("deals", /* () */0);
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Curry.app(ViewQueryComponent[/* make */3], [
                                  Caml_option.some(viewQuery.variables),
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  (function (param) {
                                      var result = param[/* result */0];
                                      if (typeof result === "number") {
                                        return React.createElement("div", {
                                                    className: cls
                                                  }, "Loading users!");
                                      } else if (result.tag) {
                                        return React.createElement("div", {
                                                    className: cls
                                                  }, React.createElement("ul", undefined, $$Array.map(displayDetails, result[0].users)));
                                      } else {
                                        return React.createElement("div", {
                                                    className: cls
                                                  }, result[0].message);
                                      }
                                    })
                                ])), ReasonReact.element(undefined, undefined, Curry._4(CreateNewMutationComponent[/* make */4], undefined, undefined, undefined, (function (mutation, param) {
                                    var createNewMutation = make$1("deals", "Prasanna", "prasanna.gnanaraj@alphasights.com", /* () */0);
                                    return React.createElement("div", undefined, React.createElement("button", {
                                                    onClick: (function (_mouseEvent) {
                                                        Curry._3(mutation, Caml_option.some(createNewMutation.variables), /* array */["viewUsers"], /* () */0);
                                                        return /* () */0;
                                                      })
                                                  }, "Add User"));
                                  }))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.str = str;
exports.ViewAll = ViewAll;
exports.CreateNew = CreateNew;
exports.ViewQueryComponent = ViewQueryComponent;
exports.CreateNewMutationComponent = CreateNewMutationComponent;
exports.displayDetails = displayDetails;
exports.make = make$2;
/* component Not a pure module */
